# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TestAdarshSinha
                                 A QGIS plugin
 This plugin loads and visualizes point, line, and polygon shapefiles
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2025 by AdarshSinha7
        email                : adarshsinha.gkp@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject, QgsVectorLayer, QgsMessageLog, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .test_AdarshSinha_dialog import TestAdarshSinhaDialog
import os.path


class TestAdarshSinha:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TestAdarshSinha_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Test Adarsh Sinha')
        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Initialize dialog
        self.dlg = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TestAdarshSinha', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/test_adarshsinha/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Load Shapefiles'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Test Adarsh Sinha'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_point_file(self):
        """Select point shapefile"""
        filename, _ = QFileDialog.getOpenFileName(
            self.dlg,
            "Select Point Shapefile",
            "",
            "Shapefiles (*.shp)")
        if filename:
            self.dlg.pointFileLineEdit.setText(filename)

    def select_line_file(self):
        """Select line shapefile"""
        filename, _ = QFileDialog.getOpenFileName(
            self.dlg,
            "Select Line Shapefile",
            "",
            "Shapefiles (*.shp)")
        if filename:
            self.dlg.lineFileLineEdit.setText(filename)

    def select_polygon_file(self):
        """Select polygon shapefile"""
        filename, _ = QFileDialog.getOpenFileName(
            self.dlg,
            "Select Polygon Shapefile",
            "",
            "Shapefiles (*.shp)")
        if filename:
            self.dlg.polygonFileLineEdit.setText(filename)

    def upload_point_file(self):
        """Upload and add point shapefile to QGIS"""
        filename = self.dlg.pointFileLineEdit.text()
        if filename:
            self.load_shapefile(filename, "Point Layer")

    def upload_line_file(self):
        """Upload and add line shapefile to QGIS"""
        filename = self.dlg.lineFileLineEdit.text()
        if filename:
            self.load_shapefile(filename, "Line Layer")

    def upload_polygon_file(self):
        """Upload and add polygon shapefile to QGIS"""
        filename = self.dlg.polygonFileLineEdit.text()
        if filename:
            self.load_shapefile(filename, "Polygon Layer")

    def load_shapefile(self, filepath, layer_name):
        """Load a shapefile into QGIS"""
        try:
            # Create a vector layer from the shapefile
            layer = QgsVectorLayer(filepath, layer_name, "ogr")
            
            # Check if the layer is valid
            if not layer.isValid():
                self.iface.messageBar().pushMessage(
                    "Error", 
                    f"Could not load layer from {filepath}", 
                    level=Qgis.Critical
                )
                return False
            
            # Add the layer to the QGIS project
            QgsProject.instance().addMapLayer(layer)
            
            # Show success message
            self.iface.messageBar().pushMessage(
                "Success", 
                f"Loaded {layer_name} successfully", 
                level=Qgis.Success
            )
            return True
            
        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error", 
                f"Error loading shapefile: {str(e)}", 
                level=Qgis.Critical
            )
            return False

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TestAdarshSinhaDialog()
            
            # Connect buttons to methods
            self.dlg.selectPointButton.clicked.connect(self.select_point_file)
            self.dlg.selectLineButton.clicked.connect(self.select_line_file)
            self.dlg.selectPolygonButton.clicked.connect(self.select_polygon_file)
            
            self.dlg.uploadPointButton.clicked.connect(self.upload_point_file)
            self.dlg.uploadLineButton.clicked.connect(self.upload_line_file)
            self.dlg.uploadPolygonButton.clicked.connect(self.upload_polygon_file)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass